##
# Copyright (c) 2013 Les Hazlewood and contributors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# INI configuration is very powerful and flexible, while still remaining succinct.
# Please http://shiro.apache.org/configuration.html and
# http://shiro.apache.org/web.html for more.

[main]

# Let's use some in-memory caching to reduce the number of runtime lookups against Stormpath.  A real
# application might want to use a more robust caching solution (e.g. ehcache or a distributed cache).  When using such
# caches, be aware of your cache TTL settings: too high a TTL and the cache won't reflect any potential
# changes in Stormpath fast enough.  Too low and the cache could evict too often, reducing performance.
#cacheManager = org.apache.shiro.cache.MemoryConstrainedCacheManager
#cacheManager = org.apache.shiro.cache.ehcache.EhCacheManager
#securityManager.cacheManager = $cacheManager

shiro.loginUrl = /login.jsp
#authc.successUrl = /whatever

# -----------------------------------------------------------------------------
# following section is for configuring ActiveDirectory realm. Replace example
# values before add to securityManager.realm
# -----------------------------------------------------------------------------
#activeDirectoryRealm = org.apache.shiro.realm.activedirectory.ActiveDirectoryRealm
activeDirectoryRealm = rzd.pktbcct.shiro.realm.activedirectory.CustomActiveDirectoryRealm
activeDirectoryRealm.url = ldap://10.240.2.254:389
#activeDirectoryRealm.systemUsername = apptest
#activeDirectoryRealm.systemPassword = apptest
activeDirectoryRealm.systemUsername = pktbcki\vnikishin
activeDirectoryRealm.systemPassword = van

#activeDirectoryRealm.searchBase = o=sevenSeas,ou=people
activeDirectoryRealm.searchBase = "ou=Application,dc=pktbcki,dc=org,dc=rzd"

#activeDirectoryRealm.principalSuffix=@pktbcki.org.rzd


#activeDirectoryRealm.groupRolesMap = "CN=NIO.Operator.dlo,OU=Roles,OU=Application,DC=pktbcki,DC=org,DC=rzd":"NIO.Operator.dlo"
#activeDirectoryRealm.groupRolesMap = "CN=NIO.Operator.dlo,OU=Roles,OU=Application,DC=pktbcki,DC=org,DC=rzd":"group1","CN=NIO.Operator.slo,OU=Roles,OU=Application,DC=pktbcki,DC=org,DC=rzd":"admin"







securityManager.realms = $activeDirectoryRealm
#securityManager.realms = $ldapRealm


anyofroles = rzd.pktbcct.shiro.web.filter.authz.AnyOfRolesAuthorizationFilter


[users]
# format: username = password, role1, role2, ..., roleN
root = secret,admin,Captains
#guest = guest,guest
#Officer = Officer,Officers,Enlisted
#presidentskroob = 12345,president
#darkhelmet = ludicrousspeed,darklord,schwartz
#lonestarr = vespa,goodguy,schwartz

[roles]
# format: roleName = permission1, permission2, ..., permissionN
admin = *
#schwartz = lightsaber:*
#goodguy = winnebago:drive:eagle5
group1 = *
#NIO.Operator.dlo = *
#NIO.Operator.ovr = *

[urls]
# The /login.jsp is not restricted to authenticated users (otherwise no one could log in!), but
# the 'authc' filter must still be specified for it so it can process that url's
# login submissions. It is 'smart' enough to allow those requests through as specified by the
# shiro.loginUrl above.
/login.jsp = authc
/logout = logout
/account/** = authc, anyofroles["group1,admin,NIO.Operator.ovr"]
#,roles[group1]
/** = authc
#/remoting/** = authc, roles[b2bClient], perms["remote:invoke:lan,wan"]


